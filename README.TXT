Project: naive-ticket-machine
Authors: David Barnes and Michael Kölling

This project is part of the material for the book

   Objects First with Java - A Practical Introduction using BlueJ
   Seventh edition
   David J. Barnes and Michael Kölling
   Pearson Education

It is discussed in chapter 2.

Purpose of project: To illustrate the basics of fields, constructors, and methods.
How to start this project: Create one or more TicketMachine objects.

Part 2:
2.  0
3. the machine always trusts that the user inserted the right ammount of money and has no way to check or recourse 
if they didn't
5. the price is different
6. public class LabClass {} public class Student {}
7. you can't switch the places. You get multiple errors stating that it is expecting different things in those places (ex: <Identifier> expected)
   I think these errors do clearly indicate that keywords are in the wrong order.
8. It seems to work fine without the public keyword. There's no errors and you can still create instances and call the methods. 
9. you can't leave out the class keyword
10. fields: price,total,balance
    constructor: TicketMachine()
    methods: getPrice(),getBalance(),insertMoney(),printTicket()
11. it matches the class name and sets the value of the fields
12. int,Student,Server
13. alive,tutor,game
14. Student,Server,Person,Game
15. it doesn't matter what order you declare the field variables in
16. yes, it expects a semicolon
18. Student
19. 2 of type String and double
20. the parameters of the cunstructor are very likely to be fields, but it doesnt necessarily represent all of the fields
21. name = petsName;
22.public void Date(String month, int day, int year){}
23. the methods have different names and they return the values of different variables
24. "How much money has been inserted since the last ticket was printed?"
25. no, it compiles fine, it does not need to match
27. missing return statement
28. printTicket doesnt return anything
29. no they don't because they instead do other things
31. score += points;
32. it is a mutator because it changes the value of one of Student's fields
33. price -= amount;
34. public void setAge(int currentAge)
{
    age = currentAge;
    
}
35. public void setAlive(boolean isAlive)
{
    alive = isAlive;
}
36. the value of price is always 0
37. My cat has green eyes.
39. it will print the word price not the value of the variable
40. this will print that line exactly not the value of any variables
42. different because the value of the price variable is different
43. it seems that %d means the value of whatever comes after the comma ( in this case price) and %n probably indicates a new line
44. it will not prompt you for any values
46. it is a mutator